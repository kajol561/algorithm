	
#include <iostream>
using namespace std;

// Max Heapify function
int max_heapify(int arr[], int i, int size)
{
  int count = 0;
	int maxIndex = i;
	int l = 2 * i + 1; // left child
	int r = 2 * i + 2; // right child
	if (l < size && arr[l] > arr[maxIndex])
		maxIndex = l;
	if (r < size && arr[r] > arr[maxIndex])
		maxIndex = r;
	if (i != maxIndex)
	{
	  count++;
		swap(arr[i], arr[maxIndex]);
		count += max_heapify(arr, maxIndex, size);
	}
	return count;
}

/*
	Build Heap function - iterating over all the non leaf nodes and applying max_heapify
*/
int buildMaxHeap(int arr[], int size)
{
  int count = 0;
	for (int i = size / 2-1; i >= 0; --i)
		count += max_heapify(arr, i, size) + 1;
	return count;
}

/*
	Heap Sort function - iterates (size-1) times, swap max element (root) and last element and then applying max_heapify on root element (and decrease size by 1)
*/
int heapSort(int arr[], int size)
{
	int count = buildMaxHeap(arr, size);
  for (int i = size - 1; i > 0; i--) {
    swap(arr[0], arr[i]);
    count += max_heapify(arr, 0, i) + 1;
  }
  return count;
}

/*
	Main Function
*/
int main()
{
  int arr[10] = {70,37,9,55,26,92,82,82,48,22};
	int count = heapSort(arr, 10);
	cout << "\nSorted array: ";
	for (int i = 0; i < 10; ++i)
		cout << arr[i] << " ";
	cout << endl;
	cout << "# of comparisons: " << count << endl;
}
